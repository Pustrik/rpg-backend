{"version":3,"file":"warrior.js","sourceRoot":"","sources":["../../../src/entityes/warrior.ts"],"names":[],"mappings":";;;;;;AAAA,6CAAmD;AACnD,kFAAoD;AAEpD,MAAa,OAAQ,SAAQ,sBAAS;IAOlC,YAAY,IAAY,EAAE,MAAc,EAAE,MAAc,EAAE,OAAmB,EAAE,OAAe;QACtF,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,CAAC;IAEM,KAAK;QACR,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IACM,aAAa;QAChB,OAAO;YACH,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,OAAO,EAAE,IAAI,CAAC,OAAO;SACxB,CAAC;IACN,CAAC;IACM,aAAa,CAAC,MAAW,EAAE,EAAU,EAAE,QAAkB;QAC5D,IAAG,EAAE,IAAI,CAAC;YACN,MAAM,wBAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QAC9C,IAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;YACf,OAAO,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC,CAAA,CAAC,CAAA,CAAC,CAAA,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;QACzD,IAAG,MAAM,CAAC,OAAO,IAAI,uBAAU,CAAC,OAAO;YACnC,OAAO,CAAC,EAAE,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,CAAC,CAAA,CAAC,CAAA,CAAC,CAAA,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC;QACzD,MAAM,wBAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC9C,CAAC;IACM,MAAM,CAAC,EAAU;QACpB,IAAG,EAAE,IAAI,CAAC;YACN,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;QACxB,MAAM,wBAAQ,CAAC,WAAW,CAAC,aAAa,CAAC,CAAA;IAC7C,CAAC;IACM,UAAU,CAAC,WAAqB;QACnC,IAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;YACzC,MAAM,wBAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;QAAA,CAAC;QAC9C,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ;AA7CD,0BA6CC","sourcesContent":["import {Character, DamageType} from \"./characters\";\nimport ApiError from \"../exteptions/api-exceptions\";\n\nexport class Warrior extends Character{\n    protected class: string;\n    protected hp: number;\n    protected damage: number;\n    protected ability: string;\n    protected dmgType: DamageType;\n\n    constructor(name: string, health: number, damage: number, dmgType: DamageType, ability: string) {\n            super();\n            this.class = name;\n            this.hp = health;\n            this.damage = damage;\n            this.dmgType = dmgType;\n            this.ability = ability;\n    }\n\n    public getHp(): number {\n        return this.hp;\n    }\n    public dealingDamage() {\n        return {\n            damage: this.damage,\n            dmgType: this.dmgType\n        };\n    }\n    public gettingDamage(damage: any, hp: number, statuses: number[]): number {\n        if(hp <= 0)\n            throw ApiError.wrongAction('cant_attack');\n        if(statuses[0] == 0)\n            return (hp - damage.damage < 0)?0:hp - damage.damage;\n        if(damage.dmgType == DamageType.MAGICAL)\n            return (hp - damage.damage < 0)?0:hp - damage.damage;\n        throw ApiError.wrongAction('cant_attack');\n    }\n    public revive(hp: number): number {\n        if(hp <= 0)\n            return this.getHp();\n        throw ApiError.wrongAction('cant_revive')\n    }\n    public useAbility(ownStatuses: number[]): number[] {\n        if(ownStatuses[0] != 0 || ownStatuses[1] != 0)\n            throw ApiError.wrongAction('cant_spell');;\n        ownStatuses[0] = 1;\n        return ownStatuses;\n    }\n}"]}