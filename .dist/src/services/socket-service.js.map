{"version":3,"file":"socket-service.js","sourceRoot":"","sources":["../../../src/services/socket-service.ts"],"names":[],"mappings":"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","sourcesContent":["import player_model from \"../databases/mongo/models/player-model\";\nimport playersDto from \"../dtos/player-dto\";\nimport {io} from \"../socket/socket-server\";\nimport IPlayer from \"../../interfaces/i-player\";\n\nexport type SocketResponse = 'update_all' | 'update_one' | 'user_connected' | 'update_chat'| 'user_disconnected' | 'cant_attack' | 'cant_spell' | 'cant_revive' | 'error';\n\nexport default class SocketService {\n    static async sendMessage(name: SocketResponse, users: string[], payload?: Object) {\n        console.info('Emitting event: ' + name + ' to', users);\n        if (users.length == 0) return;\n        users.forEach((id) => (payload ? io.to(id).emit(name, payload) : io.to(id).emit(name)));\n    }\n\n    static async getAllSockets(): Promise<string[]> {\n        return Object.values(Object.values(await player_model.find()).map((player) => {\n            return playersDto(player);\n        })).map((val) => {\n            return val.socket_id\n        });\n    }\n\n    static async getAllPlayers(): Promise<IPlayer[]> {\n        return Object.values(await player_model.find()).map((player) => {\n            return playersDto(player);\n        });\n    }\n\n    static getSocketsButCurrent(players: IPlayer[], socket: string): string[] {\n        return players.map((val) => {\n            if (val.socket_id !== socket)\n                return val.socket_id;\n        });\n    }\n\n    static async applyResult(result: number, player: IPlayer) {\n        player.hp = result;\n        await player_model.updateOne({socket_id: player.socket_id}, {$set: {hp: result}});\n        await this.sendMessage('update_all', await this.getAllSockets(), await this.getAllPlayers());\n        await this.sendMessage('update_one', [player.socket_id], player);\n    }\n\n    static async applySpell(result: number[], player: IPlayer) {\n        player.statuses = result;\n        await player_model.updateOne({socket_id: player.socket_id}, {$set: {statuses: result}});\n        await this.sendMessage('update_all', await this.getAllSockets(), await this.getAllPlayers());\n        console.log('Upp one ' + player.socket_id + ' ' + Object.values(player));\n        await this.sendMessage('update_one', [player.socket_id], player);\n    }\n\n    static async buffTimeout(player: IPlayer, status: number) {\n        setTimeout(async () => {\n            const userData = await player_model.findOne({socket_id: player.socket_id});\n            if (!userData)\n                return;\n            userData.statuses[status] = 0;\n            player.statuses = userData.statuses;\n            await player_model.updateOne({socket_id: player.socket_id}, {$set: {statuses: userData.statuses}});\n            await this.sendMessage('update_all', await this.getAllSockets(), await this.getAllPlayers());\n            console.log('Undo buff ' + player.socket_id + ' ' + Object.values(player));\n            await this.sendMessage('update_one', [player.socket_id], player)\n        }, 10 * 1000);\n    }\n}"]}