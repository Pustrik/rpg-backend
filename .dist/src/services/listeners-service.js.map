{"version":3,"file":"listeners-service.js","sourceRoot":"","sources":["../../../src/services/listeners-service.ts"],"names":[],"mappings":"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","sourcesContent":["import IPlayer from '../../interfaces/i-player';\nimport IMessage from '../../interfaces/i-message';\nimport player_model from '../databases/mongo/models/player-model';\nimport {Socket} from 'socket.io';\nimport {CharacterFactory} from './character-service';\nimport playersFullDto from \"../dtos/full-data-dto\";\nimport {UsersRepo} from \"../repositories/postgres/users-repo\";\nimport SocketService from \"./socket-service\";\nimport ApiError from \"../exteptions/api-exceptions\";\nimport MessagesRepo from \"../repositories/redis/messages-repo\";\n\nconst factory = new CharacterFactory();\nconst characters = (async () => {\n    return await factory.create()\n})();\nexport default class ListenersService {\n    static async handshake(socket: Socket, user: IPlayer, callback: (player: IPlayer, players: IPlayer[]) => void) {\n        console.log('Handshake received from: ' + user.username);\n\n        const reconnected = await SocketService.getAllSockets();\n        if (reconnected.includes(socket.id)) {\n            console.log('This user has reconnected');\n            console.log('Sending callback for reconnect');\n            callback(user, await SocketService.getAllPlayers());\n            return;\n        }\n        const mesCache: IMessage[] = await MessagesRepo.getCache();\n\n        const playerData = playersFullDto(await UsersRepo.getJoined(user.username));\n        user.class_id = playerData.classId\n        user.socket_id = socket.id;\n        user.hp = playerData.hp;\n        await player_model.create({\n            socket_id: socket.id,\n            username: user.username,\n            hp: user.hp,\n            statuses: user.statuses,\n            class_id: user.class_id\n        });\n        const players = await SocketService.getAllPlayers();\n        console.log('Sending callback');\n        callback(user, players);\n        await SocketService.sendMessage('user_connected', SocketService.getSocketsButCurrent(players, socket.id), players);\n        await SocketService.sendMessage('update_chat', await SocketService.getAllSockets(), mesCache);\n    }\n\n    static async disconnect(socket: Socket) {\n        console.log('Disconnect received from: ' + socket.id);\n        const user = player_model.findOne({socket_id: socket.id});\n        if (user) {\n            await player_model.deleteOne({socket_id: socket.id});\n            await SocketService.sendMessage('user_disconnected', await SocketService.getAllSockets(), socket.id);\n        }\n    }\n\n    static async attack(socket: Socket, winger: IPlayer, victim: IPlayer) {\n        const result = characters[victim.class_id].gettingDamage(characters[winger.class_id].dealingDamage(), victim.hp, victim.statuses);\n        console.log('Attack result ' + winger.username + ' on ' + victim.username + ' = ' + result);\n        if (winger.hp <= 0)\n            throw ApiError.wrongAction('cant_attack');\n        await SocketService.applyResult(result, victim);\n    }\n\n    static async revive(socket: Socket, player: IPlayer) {\n        const result = characters[player.class_id].revive(player.hp);\n        console.log('Revive result ' + player.username + ' hp: ' + player.hp + ' = ' + result);\n        await SocketService.applyResult(result, player);\n    }\n\n    static async spell(socket: Socket, player: IPlayer, victim?: IPlayer) {\n        if (player.hp <= 0 || victim && victim.hp <= 0)\n            throw ApiError.wrongAction('cant_spell');\n\n        if (victim) {\n            const result = characters[player.class_id].useAbility(player.statuses, victim.statuses);\n            console.log('Using spell: ' + player.username + ' on ' + victim.username);\n            await SocketService.applySpell(result, victim);\n            await SocketService.buffTimeout(victim, 1);\n            return;\n        }\n\n        const result = characters[player.class_id].useAbility(player.statuses);\n        console.log('Using spell: ' + player.username);\n        await SocketService.applySpell(result, player);\n        await SocketService.buffTimeout(player, 0);\n    }\n\n    static async message(socket: Socket, message: IMessage) {\n        await MessagesRepo.write(message);\n        const mesCache: IMessage[] = await MessagesRepo.getCache();\n        console.log('Received message: ' + message.username + ': ' + message.message);\n        await SocketService.sendMessage('update_chat', await SocketService.getAllSockets(), mesCache);\n    }\n}"]}