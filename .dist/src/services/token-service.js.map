{"version":3,"file":"token-service.js","sourceRoot":"","sources":["../../../src/services/token-service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAAoC;AACpC,wFAAgE;AAChE,+CAAyC;AAEzC,oDAA4B;AAC5B,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAqB,YAAY;IAC7B,MAAM,CAAC,QAAQ,CAAC,OAAO;QACnB,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC,SAAS,EAAE,IAAI,EAAC,CAAC,CAAC;QAClF,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,EAAC,SAAS,EAAE,KAAK,EAAC,CAAC,CAAC;QAErF,OAAO,EAAC,YAAY,EAAE,aAAa,EAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAc,EAAE,YAAoB;QAClD,MAAM,SAAS,GAAG,MAAM,qBAAW,CAAC,OAAO,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAC;QAC5D,IAAI,SAAS,EAAE;YACX,SAAS,CAAC,aAAa,GAAG,YAAY,CAAC;YACvC,OAAO,MAAM,SAAS,CAAC,IAAI,EAAE,CAAC;SACjC;QACD,MAAM,KAAK,GAAG,MAAM,qBAAW,CAAC,MAAM,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,YAAY,EAAC,CAAC,CAAC;QACpF,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,YAAoB;QACpC,MAAM,SAAS,GAAG,MAAM,qBAAW,CAAC,SAAS,CAAC,EAAC,aAAa,EAAE,YAAY,EAAC,CAAC,CAAC;QAC7E,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,YAAoB;QAClC,MAAM,SAAS,GAAG,MAAM,qBAAW,CAAC,OAAO,CAAC,EAAC,aAAa,EAAE,YAAY,EAAC,CAAC,CAAC;QAC3E,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,KAAa;QAC/B,IAAI;YACA,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC3D,OAAO,QAAQ,CAAC;SACnB;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,MAAM,CAAC,eAAe,CAAC,KAAa;QAChC,IAAI;YACA,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC5D,OAAO,QAAQ,CAAC;SACnB;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,IAAI,CAAC;SACf;IACL,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI;QAClB,MAAM,QAAQ,GAAG,IAAA,kBAAO,EAAC,IAAI,CAAC,CAAC;QAC/B,MAAM,MAAM,GAAe,IAAI,CAAC,QAAQ,mBAAK,QAAQ,EAAE,CAAC;QACxD,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QACnD,uBAAQ,IAAI,EAAE,QAAQ,IAAK,MAAM,EAAE;IACvC,CAAC;CACJ;AApDD,+BAoDC","sourcesContent":["import * as jwt from \"jsonwebtoken\";\nimport token_model from \"../databases/mongo/models/token-model\";\nimport {userDto} from \"../dtos/user-dto\";\nimport {ITokenPair} from \"../../interfaces/i-token\";\nimport dotenv from 'dotenv';\ndotenv.config();\n\nexport default class TokenService {\n    static generate(payload) {\n        const access_token = jwt.sign(payload, process.env.JWT_ACCESS, {expiresIn: '3h'});\n        const refresh_token = jwt.sign(payload, process.env.JWT_REFRESH, {expiresIn: '30d'});\n\n        return {access_token, refresh_token};\n    }\n\n    static async save(userId: string, refreshToken: string) {\n        const tokenData = await token_model.findOne({user: userId});\n        if (tokenData) {\n            tokenData.refresh_token = refreshToken;\n            return await tokenData.save();\n        }\n        const token = await token_model.create({user: userId, refresh_token: refreshToken});\n        return token;\n    }\n\n    static async remove(refreshToken: string) {\n        const tokenData = await token_model.deleteOne({refresh_token: refreshToken});\n        return tokenData;\n    }\n\n    static async find(refreshToken: string) {\n        const tokenData = await token_model.findOne({refresh_token: refreshToken});\n        return tokenData;\n    }\n\n    static validateAccess(token: string) {\n        try {\n            const userData = jwt.verify(token, process.env.JWT_ACCESS);\n            return userData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    static validateRefresh(token: string) {\n        try {\n            const userData = jwt.verify(token, process.env.JWT_REFRESH);\n            return userData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    static async user(user) {\n        const usersDto = userDto(user);\n        const tokens: ITokenPair = this.generate({...usersDto});\n        await this.save(usersDto.id, tokens.refresh_token);\n        return {user: usersDto, ...tokens};\n    }\n}"]}