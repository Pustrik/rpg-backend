{"version":3,"file":"user-service.js","sourceRoot":"","sources":["../../../src/services/user-service.ts"],"names":[],"mappings":"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","sourcesContent":["import user_model from \"../databases/mongo/models/user-model\";\nimport * as bcrypt from 'bcrypt';\nimport ApiError from \"../exteptions/api-exceptions\";\nimport {UsersRepo} from \"../repositories/postgres/users-repo\";\nimport TokenService from \"./token-service\";\n\nexport async function registration(username: string, email: string, password: string, classId: string) {\n    const candidate = await user_model.findOne({username: username});\n    if(candidate)\n        throw ApiError.badRequest('User exist');\n    const hash = bcrypt.hashSync(password, 5);\n    const user = await user_model.create({username: username, password: hash});\n    await UsersRepo.add(user.id, username, email, hash, Number(classId));\n    return await TokenService.user(user);\n}\nexport async function login(username: string, password: string) {\n    const user = await user_model.findOne({username});\n    if(!user)\n        throw ApiError.badRequest('User does not exist');\n    const isEqual = bcrypt.compareSync(password, user.password);\n    if(!isEqual)\n        throw ApiError.badRequest('Wrong password');\n    return await TokenService.user(user);\n}\n\nexport async function logout(refreshToken: string) {\n    return await TokenService.remove(refreshToken);\n}\n\nexport async function refresh(refreshToken: string) {\n    if(!refreshToken)\n        throw ApiError.unauthorizedError();\n    const userData = TokenService.validateRefresh(refreshToken);\n    const tokenFromBb = await TokenService.find(refreshToken);\n    if(!userData || !tokenFromBb)\n        throw ApiError.unauthorizedError();\n    const user = await user_model.findById(tokenFromBb.user);\n    return await TokenService.user(user);\n}\n\nexport async function allActiveUsers() {\n    const users = await user_model.find();\n    return users;\n}\n\nexport async function changeUserData(id: string, username: string, password: string, password_d: string, passwordOld:string, classId: number) {\n    const user = await UsersRepo.getById(id);\n    const isEqual = bcrypt.compareSync(passwordOld, user.password);\n    if(!isEqual)\n        throw ApiError.badRequest('Не верный пароль');\n    const isUnique = await UsersRepo.getByName(username);\n    if(isUnique && isUnique.id != id)\n        throw ApiError.badRequest('Юзернейм существует');\n    const hash = bcrypt.hashSync(password, 5);\n    await UsersRepo.update(id, username, hash, classId);\n    const userMdb = await user_model.findById(id);\n    userMdb.username = username;\n    userMdb.password = hash;\n    await userMdb.save();\n    return await TokenService.user(userMdb);\n}"]}