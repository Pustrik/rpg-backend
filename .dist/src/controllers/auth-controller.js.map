{"version":3,"file":"auth-controller.js","sourceRoot":"","sources":["../../../src/controllers/auth-controller.ts"],"names":[],"mappings":";;;;;AAAA,2DAA6F;AAE7F,kFAAwD;AACxD,oEAA8D;AAE9D,MAAqB,cAAc;IAC3B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAY,EAAE,GAAa;QACtC,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;QACtC,MAAM,QAAQ,GAAG,MAAM,IAAA,oBAAK,EAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,MAAM,OAAO,GAAG,MAAM,sBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,aAAa,EAAE,EAAC,MAAM,EAAE,EAAE,GAAC,EAAE,GAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QACzF,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,iCAAK,QAAQ,KAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAE,CAAC;IAC/E,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,GAAY,EAAE,GAAa;QAC7C,MAAM,EAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;QACnE,IAAA,0BAAc,EAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;QACtD,MAAM,QAAQ,GAAG,MAAM,IAAA,2BAAY,EAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACzE,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,aAAa,EAAE,EAAC,MAAM,EAAE,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAChG,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAY,EAAE,GAAa;QACvC,MAAM,EAAC,YAAY,EAAC,GAAG,GAAG,CAAC,OAAO,CAAC;QACnC,MAAM,KAAK,GAAG,MAAM,IAAA,qBAAM,EAAC,YAAY,CAAC,CAAC;QACzC,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;QACjC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAY,EAAE,GAAa;QACxC,MAAM,YAAY,GAAW,GAAG,CAAC,OAAO,CAAC,aAAa,CAAC;QACvD,MAAM,QAAQ,GAAG,MAAM,IAAA,sBAAO,EAAC,YAAY,CAAC,CAAC;QAC7C,MAAM,OAAO,GAAG,CAAC,MAAM,sBAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAC7E,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,CAAC,aAAa,EAAE,EAAC,MAAM,EAAE,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,EAAE,GAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC;QAChG,OAAO,GAAG,CAAC,IAAI,iCAAK,QAAQ,KAAE,QAAQ,EAAE,OAAO,IAAE,CAAC;IAC1D,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAY,EAAE,GAAa;QACzC,MAAM,KAAK,GAAG,MAAM,IAAA,6BAAc,GAAE,CAAC;QACrC,OAAO,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;CACR;AApCD,iCAoCC","sourcesContent":["import {login, registration, logout, refresh, allActiveUsers} from \"../services/user-service\"\nimport { Request, Response } from 'express'\nimport userValidation from \"../utills/validation-utill\";\nimport {UsersRepo} from \"../repositories/postgres/users-repo\";\n\nexport default class AuthController {\n        static async login(req: Request, res: Response) {\n                const {username, password} = req.body;\n                const userData = await login(username, password);\n                const classId = await UsersRepo.getByName(username);\n                res.cookie('refresh_token', userData.refresh_token, {maxAge: 60*60*100, httpOnly: true});\n                return res.status(200).json({...userData, class_id: classId.class_id});\n        }\n\n        static async registration(req: Request, res: Response) {\n                const {username, email, password, password_d, class_id} = req.body;\n                userValidation(username, password, password_d, email);\n                const userData = await registration(username, email, password, class_id);\n                res.cookie('refresh_token', userData.refresh_token, {maxAge: 30*24*60*60*1000, httpOnly: true});\n                return res.status(200).json(userData);\n        }\n\n        static async logout(req: Request, res: Response) {\n                const {refreshToken} = req.cookies;\n                const token = await logout(refreshToken);\n                res.clearCookie('refresh_token');\n                return res.json(token);\n        }\n\n        static async refresh(req: Request, res: Response) {\n                const refreshToken: string = req.cookies.refresh_token;\n                const userData = await refresh(refreshToken);\n                const classId = (await UsersRepo.getByName(userData.user.username)).class_id;\n                res.cookie('refresh_token', userData.refresh_token, {maxAge: 30*24*60*60*1000, httpOnly: true});\n                return res.json({...userData, class_id: classId});\n        }\n\n        static async allUsers(req: Request, res: Response) {\n                const users = await allActiveUsers();\n                return res.json(users);\n        }\n}"]}