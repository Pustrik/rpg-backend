{"version":3,"file":"users-repo.js","sourceRoot":"","sources":["../../../../src/repositories/postgres/users-repo.ts"],"names":[],"mappings":"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","sourcesContent":["import IUserPDB from \"../../../interfaces/i-user-pdb\";\nimport getCurrentDate from \"../../utills/current-time-utill\";\nimport {Class} from \"../../databases/postgres/models/class-model\";\nimport User from \"../../databases/postgres/models/user-model\";\n\nexport class UsersRepo {\n    static async add(id: string, username: string, email: string, password: string, class_id: number): Promise<IUserPDB> {\n        const userData = await User.create({\n            id: id,\n            username: username,\n            email: email,\n            password: password,\n            class_id: class_id,\n            created_at: getCurrentDate(),\n            updated_at: getCurrentDate()\n        });\n\n        console.log(userData.toJSON());\n        console.log(userData);\n        return userData.toJSON();\n\n    }\n\n    static async getAll(): Promise<IUserPDB[]> | null {\n        const users = await User.findAll(\n            {\n                attributes: ['id', 'username', 'email', 'password', 'class_id', 'created_at', 'updated_at']\n            });\n        return users ? users.map((user) => user.toJSON()) : null;\n\n    }\n\n    static async getByName(username: string): Promise<IUserPDB> | null {\n        const userData = await User.findOne({\n            attributes: ['id', 'username', 'email', 'password', 'class_id', 'created_at', 'updated_at'],\n            where: {\n                username: username\n            }\n        });\n        return userData ? userData.toJSON() : null;\n\n    }\n\n    static async getById(id: string): Promise<IUserPDB> | null {\n        const userData = await User.findOne({\n            attributes: ['id', 'username', 'email', 'password', 'class_id', 'created_at', 'updated_at'],\n            where: {\n                id: id\n            }\n        });\n        return userData ? userData.toJSON() : null;\n    }\n\n    static async update(id: string, username: string, password: string, class_id: number) {\n        const userData = await User.update(\n            {\n                username: username,\n                password: password,\n                class_id: class_id,\n                updated_at: getCurrentDate()\n            },\n            {\n                where: {\n                    id: id\n                }\n            }\n        );\n        return userData;\n    }\n\n    static async delete(id: string) {\n        const userData = await User.destroy({\n            where: {\n                id: id\n            }\n        });\n        return userData;\n    }\n\n    static async getJoined(username: string) {\n        const a: any = await User.findOne({\n            attributes: ['id', 'username', 'email', 'password', 'class_id', 'created_at', 'updated_at'],\n            where: {\n                username: username\n            },\n            include: Class\n        });\n        return a.toJSON();\n    }\n}\n"]}