{"version":3,"file":"socket-listeners.js","sourceRoot":"","sources":["../../../src/socket/socket-listeners.ts"],"names":[],"mappings":";;;;;AAGA,gGAAwE;AACxE,sFAA6D;AAE7D,MAAM,cAAc,GAAG,CAAC,MAAc,EAAE,EAAE;IACtC,OAAO,CAAC,IAAI,CAAC,wBAAwB,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;IAEnD,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,IAAA,sBAAY,EAAC,KAAK,EAAE,IAAa,EAAE,QAAuD,EAAE,EAAE;QACjH,MAAM,2BAAgB,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAEf,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,IAAA,sBAAY,EAAC,KAAK,IAAI,EAAE;QAC5C,MAAM,2BAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAEf,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAA,sBAAY,EAAC,KAAK,EAAE,MAAe,EAAE,MAAe,EAAE,EAAE;QACxE,MAAM,2BAAgB,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAEf,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAA,sBAAY,EAAC,KAAK,EAAE,MAAe,EAAE,EAAE;QACvD,MAAM,2BAAgB,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAEf,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,IAAA,sBAAY,EAAC,KAAK,EAAE,MAAe,EAAE,MAAgB,EAAE,EAAE;QACxE,MAAM,2BAAgB,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;IAEf,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,IAAA,sBAAY,EAAC,KAAK,EAAE,OAAiB,EAAE,EAAE;QAC1D,MAAM,2BAAgB,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AACnB,CAAC,CAAA;AAED,kBAAe,cAAc,CAAC","sourcesContent":["import {Socket} from \"socket.io\";\nimport IPlayer from \"../../interfaces/i-player\";\nimport IMessage from \"../../interfaces/i-message\";\nimport errorHandler from \"../middleware/socket-middleware/errorhandler\";\nimport ListenersService from \"../services/listeners-service\";\n\nconst startListeners = (socket: Socket) => {\n    console.info('Message received from ' + socket.id);\n\n    socket.on('handshake', errorHandler(async (user: IPlayer, callback: (player: IPlayer, players: IPlayer[]) => void) => {\n        await ListenersService.handshake(socket, user, callback);\n    }, socket.id));\n\n    socket.on('disconnect', errorHandler(async () => {\n        await ListenersService.disconnect(socket);\n    }, socket.id));\n\n    socket.on('attack', errorHandler(async (winger: IPlayer, victim: IPlayer) => {\n        await ListenersService.attack(socket, winger, victim);\n    }, socket.id));\n\n    socket.on('revive', errorHandler(async (player: IPlayer) => {\n        await ListenersService.revive(socket, player);\n    }, socket.id));\n\n    socket.on('spell', errorHandler(async (player: IPlayer, victim?: IPlayer) => {\n        await ListenersService.spell(socket, player, victim);\n    }, socket.id));\n\n    socket.on('message', errorHandler(async (message: IMessage) => {\n        await ListenersService.message(socket, message);\n    }, socket.id));\n}\n\nexport default startListeners;\n\n"]}