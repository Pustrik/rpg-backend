{"version":3,"file":"errorhandler.js","sourceRoot":"","sources":["../../../../src/middleware/http-middleware/errorhandler.ts"],"names":[],"mappings":";;;;;;AAAA,qFAAuD;AAGvD,MAAM,eAAe,GAAG,CAAC,KAAgC,EAC/B,GAAY,EACZ,GAAa,EACb,IAAkB,EAAE,EAAE;IAC5C,IAAG,CAAC,CAAC,KAAK,YAAY,wBAAQ,CAAC,EAAE;QAC7B,OAAO,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;KACtB;IACD,OAAO,CAAC,KAAK,CAAE,UAAU,EAAE,OAAO,EAAE;QAChC,OAAO,EAAE,oBAAoB;QAC7B,MAAM,EAAE,YAAY,GAAG,CAAC,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE;QACjD,IAAI,kCACG,GAAG,CAAC,IAAI,KACX,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,SAAS,GACvB;QACD,KAAK;KACR,CAAC,CAAC;IACH,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;AACvB,CAAC,CAAA;AAWO,0CAAe;AATvB,MAAM,kBAAkB,GAAG,CAAC,KAAgC,EAChC,GAAY,EACZ,GAAa,EACb,IAAkB,EAAE,EAAE;IAC9C,IAAG,CAAC,CAAC,KAAK,YAAY,wBAAQ,CAAC;QAC3B,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,uBAAuB,EAAC,CAAC,CAAC;IACpE,OAAO,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAC,CAAC,CAAC;AACzF,CAAC,CAAA;AAEwB,gDAAkB","sourcesContent":["import ApiError from \"../../exteptions/api-exceptions\";\nimport {NextFunction, Request, Response} from \"express\";\n\nconst errorLoggerHttp = (error: Error & Partial<ApiError>,\n                          req: Request,\n                          res: Response,\n                          next: NextFunction) => {\n    if(!(error instanceof ApiError)) {\n        console.error('\\x1b[31m', 'Server error', error);\n        return next(error);\n    }\n    console.error( '\\x1b[31m', 'error', {\n        message: 'Error Handler Http',\n        action: `Method:: ${req.method} url:: ${req.url}`,\n        body: {\n            ...req.body,\n            secretKey: undefined,\n            publicKey: undefined\n        },\n        error\n    });\n    return next(error);\n}\n\nconst errorResponderHttp = (error: Error & Partial<ApiError>,\n                            req: Request,\n                            res: Response,\n                            next: NextFunction) => {\n    if(!(error instanceof ApiError))\n        return res.status(500).json({message: 'Непредвиденная ошибка'});\n    return res.status(error.status).json({message: error.message, errors: error.errors});\n}\n\nexport {errorLoggerHttp, errorResponderHttp};"]}